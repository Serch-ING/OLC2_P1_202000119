Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    AND
    AS
    BARRA
    BREAK
    CAPACITY
    CARACTER
    CD
    CI
    CLONE
    CONTAINS
    CONTINUE
    DESIGUALDAD
    DIRSTRING
    DIVI
    DP
    ELSE
    ERR
    FALSE
    FOR
    FUNCION
    GBAJO
    IF
    IGUAL
    IGUALDAD
    IN
    INSERT
    LD
    LEN
    LET
    LI
    LOOP
    MAIN
    MATCH
    MAYOR
    MAYORIGUAL
    MENOR
    MENORIGUAL
    MOD
    MODULO
    MULTI
    MUT
    NEW
    NOT
    OR
    POW
    POWF
    PUBLICO
    PUNTO
    PUSH
    REFER
    REMOVE
    RESTA
    RETURN
    SQRT
    STRUCT
    TIPOBOOL
    TIPOCHAR
    TIPOFLOAT
    TIPOINT
    TIPOSTRING
    TOOWNED
    TOSTRING
    TRUE
    VECT
    VECTOR
    WCAPACITY
    WHILE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> impresiones
Rule 5     impresiones -> PRINTLN PI CADENA PD PYC
Rule 6     impresiones -> PRINT PI CADENA PD PYC
Rule 7     impresiones -> PRINTLN PI CADENA COMA impresion_valores PD PYC
Rule 8     impresiones -> PRINT PI CADENA COMA impresion_valores PD PYC
Rule 9     impresion_valores -> impresion_valores COMA expresiones
Rule 10    impresion_valores -> expresiones
Rule 11    expresiones -> <empty>
Rule 12    expresiones -> expresiones SUMA expresiones
Rule 13    expresiones -> ID
Rule 14    expresiones -> ENTERO
Rule 15    expresiones -> FLOAT
Rule 16    expresiones -> CADENA

Terminals, with rules where they appear

ABS                  : 
AND                  : 
AS                   : 
BARRA                : 
BREAK                : 
CADENA               : 5 6 7 8 16
CAPACITY             : 
CARACTER             : 
CD                   : 
CI                   : 
CLONE                : 
COMA                 : 7 8 9
CONTAINS             : 
CONTINUE             : 
DESIGUALDAD          : 
DIRSTRING            : 
DIVI                 : 
DP                   : 
ELSE                 : 
ENTERO               : 14
ERR                  : 
FALSE                : 
FLOAT                : 15
FOR                  : 
FUNCION              : 
GBAJO                : 
ID                   : 13
IF                   : 
IGUAL                : 
IGUALDAD             : 
IN                   : 
INSERT               : 
LD                   : 
LEN                  : 
LET                  : 
LI                   : 
LOOP                 : 
MAIN                 : 
MATCH                : 
MAYOR                : 
MAYORIGUAL           : 
MENOR                : 
MENORIGUAL           : 
MOD                  : 
MODULO               : 
MULTI                : 
MUT                  : 
NEW                  : 
NOT                  : 
OR                   : 
PD                   : 5 6 7 8
PI                   : 5 6 7 8
POW                  : 
POWF                 : 
PRINT                : 6 8
PRINTLN              : 5 7
PUBLICO              : 
PUNTO                : 
PUSH                 : 
PYC                  : 5 6 7 8
REFER                : 
REMOVE               : 
RESTA                : 
RETURN               : 
SQRT                 : 
STRUCT               : 
SUMA                 : 12
TIPOBOOL             : 
TIPOCHAR             : 
TIPOFLOAT            : 
TIPOINT              : 
TIPOSTRING           : 
TOOWNED              : 
TOSTRING             : 
TRUE                 : 
VECT                 : 
VECTOR               : 
WCAPACITY            : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expresiones          : 9 10 12 12
impresion_valores    : 7 8 9
impresiones          : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . impresiones
    (5) impresiones -> . PRINTLN PI CADENA PD PYC
    (6) impresiones -> . PRINT PI CADENA PD PYC
    (7) impresiones -> . PRINTLN PI CADENA COMA impresion_valores PD PYC
    (8) impresiones -> . PRINT PI CADENA COMA impresion_valores PD PYC

    PRINTLN         shift and go to state 5
    PRINT           shift and go to state 6

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    impresiones                    shift and go to state 4

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . impresiones
    (5) impresiones -> . PRINTLN PI CADENA PD PYC
    (6) impresiones -> . PRINT PI CADENA PD PYC
    (7) impresiones -> . PRINTLN PI CADENA COMA impresion_valores PD PYC
    (8) impresiones -> . PRINT PI CADENA COMA impresion_valores PD PYC

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINTLN         shift and go to state 5
    PRINT           shift and go to state 6

    instruccion                    shift and go to state 7
    impresiones                    shift and go to state 4

state 3

    (3) instrucciones -> instruccion .

    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> impresiones .

    PRINTLN         reduce using rule 4 (instruccion -> impresiones .)
    PRINT           reduce using rule 4 (instruccion -> impresiones .)
    $end            reduce using rule 4 (instruccion -> impresiones .)


state 5

    (5) impresiones -> PRINTLN . PI CADENA PD PYC
    (7) impresiones -> PRINTLN . PI CADENA COMA impresion_valores PD PYC

    PI              shift and go to state 8


state 6

    (6) impresiones -> PRINT . PI CADENA PD PYC
    (8) impresiones -> PRINT . PI CADENA COMA impresion_valores PD PYC

    PI              shift and go to state 9


state 7

    (2) instrucciones -> instrucciones instruccion .

    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 8

    (5) impresiones -> PRINTLN PI . CADENA PD PYC
    (7) impresiones -> PRINTLN PI . CADENA COMA impresion_valores PD PYC

    CADENA          shift and go to state 10


state 9

    (6) impresiones -> PRINT PI . CADENA PD PYC
    (8) impresiones -> PRINT PI . CADENA COMA impresion_valores PD PYC

    CADENA          shift and go to state 11


state 10

    (5) impresiones -> PRINTLN PI CADENA . PD PYC
    (7) impresiones -> PRINTLN PI CADENA . COMA impresion_valores PD PYC

    PD              shift and go to state 12
    COMA            shift and go to state 13


state 11

    (6) impresiones -> PRINT PI CADENA . PD PYC
    (8) impresiones -> PRINT PI CADENA . COMA impresion_valores PD PYC

    PD              shift and go to state 14
    COMA            shift and go to state 15


state 12

    (5) impresiones -> PRINTLN PI CADENA PD . PYC

    PYC             shift and go to state 16


state 13

    (7) impresiones -> PRINTLN PI CADENA COMA . impresion_valores PD PYC
    (9) impresion_valores -> . impresion_valores COMA expresiones
    (10) impresion_valores -> . expresiones
    (11) expresiones -> .
    (12) expresiones -> . expresiones SUMA expresiones
    (13) expresiones -> . ID
    (14) expresiones -> . ENTERO
    (15) expresiones -> . FLOAT
    (16) expresiones -> . CADENA

    SUMA            reduce using rule 11 (expresiones -> .)
    PD              reduce using rule 11 (expresiones -> .)
    COMA            reduce using rule 11 (expresiones -> .)
    ID              shift and go to state 20
    ENTERO          shift and go to state 21
    FLOAT           shift and go to state 22
    CADENA          shift and go to state 17

    impresion_valores              shift and go to state 18
    expresiones                    shift and go to state 19

state 14

    (6) impresiones -> PRINT PI CADENA PD . PYC

    PYC             shift and go to state 23


state 15

    (8) impresiones -> PRINT PI CADENA COMA . impresion_valores PD PYC
    (9) impresion_valores -> . impresion_valores COMA expresiones
    (10) impresion_valores -> . expresiones
    (11) expresiones -> .
    (12) expresiones -> . expresiones SUMA expresiones
    (13) expresiones -> . ID
    (14) expresiones -> . ENTERO
    (15) expresiones -> . FLOAT
    (16) expresiones -> . CADENA

    SUMA            reduce using rule 11 (expresiones -> .)
    PD              reduce using rule 11 (expresiones -> .)
    COMA            reduce using rule 11 (expresiones -> .)
    ID              shift and go to state 20
    ENTERO          shift and go to state 21
    FLOAT           shift and go to state 22
    CADENA          shift and go to state 17

    impresion_valores              shift and go to state 24
    expresiones                    shift and go to state 19

state 16

    (5) impresiones -> PRINTLN PI CADENA PD PYC .

    PRINTLN         reduce using rule 5 (impresiones -> PRINTLN PI CADENA PD PYC .)
    PRINT           reduce using rule 5 (impresiones -> PRINTLN PI CADENA PD PYC .)
    $end            reduce using rule 5 (impresiones -> PRINTLN PI CADENA PD PYC .)


state 17

    (16) expresiones -> CADENA .

    SUMA            reduce using rule 16 (expresiones -> CADENA .)
    PD              reduce using rule 16 (expresiones -> CADENA .)
    COMA            reduce using rule 16 (expresiones -> CADENA .)


state 18

    (7) impresiones -> PRINTLN PI CADENA COMA impresion_valores . PD PYC
    (9) impresion_valores -> impresion_valores . COMA expresiones

    PD              shift and go to state 26
    COMA            shift and go to state 25


state 19

    (10) impresion_valores -> expresiones .
    (12) expresiones -> expresiones . SUMA expresiones

    PD              reduce using rule 10 (impresion_valores -> expresiones .)
    COMA            reduce using rule 10 (impresion_valores -> expresiones .)
    SUMA            shift and go to state 27


state 20

    (13) expresiones -> ID .

    SUMA            reduce using rule 13 (expresiones -> ID .)
    PD              reduce using rule 13 (expresiones -> ID .)
    COMA            reduce using rule 13 (expresiones -> ID .)


state 21

    (14) expresiones -> ENTERO .

    SUMA            reduce using rule 14 (expresiones -> ENTERO .)
    PD              reduce using rule 14 (expresiones -> ENTERO .)
    COMA            reduce using rule 14 (expresiones -> ENTERO .)


state 22

    (15) expresiones -> FLOAT .

    SUMA            reduce using rule 15 (expresiones -> FLOAT .)
    PD              reduce using rule 15 (expresiones -> FLOAT .)
    COMA            reduce using rule 15 (expresiones -> FLOAT .)


state 23

    (6) impresiones -> PRINT PI CADENA PD PYC .

    PRINTLN         reduce using rule 6 (impresiones -> PRINT PI CADENA PD PYC .)
    PRINT           reduce using rule 6 (impresiones -> PRINT PI CADENA PD PYC .)
    $end            reduce using rule 6 (impresiones -> PRINT PI CADENA PD PYC .)


state 24

    (8) impresiones -> PRINT PI CADENA COMA impresion_valores . PD PYC
    (9) impresion_valores -> impresion_valores . COMA expresiones

    PD              shift and go to state 28
    COMA            shift and go to state 25


state 25

    (9) impresion_valores -> impresion_valores COMA . expresiones
    (11) expresiones -> .
    (12) expresiones -> . expresiones SUMA expresiones
    (13) expresiones -> . ID
    (14) expresiones -> . ENTERO
    (15) expresiones -> . FLOAT
    (16) expresiones -> . CADENA

    SUMA            reduce using rule 11 (expresiones -> .)
    PD              reduce using rule 11 (expresiones -> .)
    COMA            reduce using rule 11 (expresiones -> .)
    ID              shift and go to state 20
    ENTERO          shift and go to state 21
    FLOAT           shift and go to state 22
    CADENA          shift and go to state 17

    expresiones                    shift and go to state 29

state 26

    (7) impresiones -> PRINTLN PI CADENA COMA impresion_valores PD . PYC

    PYC             shift and go to state 30


state 27

    (12) expresiones -> expresiones SUMA . expresiones
    (11) expresiones -> .
    (12) expresiones -> . expresiones SUMA expresiones
    (13) expresiones -> . ID
    (14) expresiones -> . ENTERO
    (15) expresiones -> . FLOAT
    (16) expresiones -> . CADENA

    SUMA            reduce using rule 11 (expresiones -> .)
    PD              reduce using rule 11 (expresiones -> .)
    COMA            reduce using rule 11 (expresiones -> .)
    ID              shift and go to state 20
    ENTERO          shift and go to state 21
    FLOAT           shift and go to state 22
    CADENA          shift and go to state 17

    expresiones                    shift and go to state 31

state 28

    (8) impresiones -> PRINT PI CADENA COMA impresion_valores PD . PYC

    PYC             shift and go to state 32


state 29

    (9) impresion_valores -> impresion_valores COMA expresiones .
    (12) expresiones -> expresiones . SUMA expresiones

    PD              reduce using rule 9 (impresion_valores -> impresion_valores COMA expresiones .)
    COMA            reduce using rule 9 (impresion_valores -> impresion_valores COMA expresiones .)
    SUMA            shift and go to state 27


state 30

    (7) impresiones -> PRINTLN PI CADENA COMA impresion_valores PD PYC .

    PRINTLN         reduce using rule 7 (impresiones -> PRINTLN PI CADENA COMA impresion_valores PD PYC .)
    PRINT           reduce using rule 7 (impresiones -> PRINTLN PI CADENA COMA impresion_valores PD PYC .)
    $end            reduce using rule 7 (impresiones -> PRINTLN PI CADENA COMA impresion_valores PD PYC .)


state 31

    (12) expresiones -> expresiones SUMA expresiones .
    (12) expresiones -> expresiones . SUMA expresiones

    SUMA            reduce using rule 12 (expresiones -> expresiones SUMA expresiones .)
    PD              reduce using rule 12 (expresiones -> expresiones SUMA expresiones .)
    COMA            reduce using rule 12 (expresiones -> expresiones SUMA expresiones .)

  ! SUMA            [ shift and go to state 27 ]


state 32

    (8) impresiones -> PRINT PI CADENA COMA impresion_valores PD PYC .

    PRINTLN         reduce using rule 8 (impresiones -> PRINT PI CADENA COMA impresion_valores PD PYC .)
    PRINT           reduce using rule 8 (impresiones -> PRINT PI CADENA COMA impresion_valores PD PYC .)
    $end            reduce using rule 8 (impresiones -> PRINT PI CADENA COMA impresion_valores PD PYC .)

